import torch
import torch.nn as nn
import torch.nn.functional as F

class CalcLayer(nn.Module):
    def __init__(self):
        super(CalcLayer, self).__init__()
        self.cn01 = nn.Conv2d(25, 64, kernel_size=3, padding=1)
        self.cn02 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn03 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn04 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn05 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn06 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn07 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn08 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn09 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn10 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn11 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn12 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn13 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn14 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn15 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn16 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn17 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn18 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cn19 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.cnL  = nn.Conv2d(64, 3, kernel_size=3, padding=1)

    def forward(self, x):
        f = F.relu(self.cn01(x))
        f = F.relu(self.cn02(f))
        f = F.relu(self.cn03(f))
        f = F.relu(self.cn04(f))
        f = F.relu(self.cn05(f))
        f = F.relu(self.cn06(f))
        f = F.relu(self.cn07(f))
        f = F.relu(self.cn08(f))
        f = F.relu(self.cn09(f))
        f = F.relu(self.cn10(f))
        f = F.relu(self.cn11(f))
        f = F.relu(self.cn12(f))
        f = F.relu(self.cn13(f))
        f = F.relu(self.cn14(f))
        f = F.relu(self.cn15(f))
        f = F.relu(self.cn16(f))
        f = F.relu(self.cn17(f))
        f = F.relu(self.cn18(f))
        f = F.relu(self.cn19(f))
        f = self.cnL(f)
        return F.relu(f)